apiVersion : v1
kind : Pod
metadata:
  name: frontend
  labels:
    app: frontend
spec:
  containers:
    - name: frontend
      image: tejaswinidockerhub/frontend
      imagePullPolicy: Always
---
apiVersion : v1
kind : Pod
metadata:
  name: catalogue
  labels:
    app: catalogue
spec:
  initContainers:
    - name: parameters-pull
      image: docker.io/tejaswinidockerhub/init-container-parameters-image
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /parameters
          name: parameters
      env:
        - name: PARAMS
          value: "dev.roboshop.catalogue.MONGO_URL,MONGO_URL"
  containers:
    - name: catalogue
      image: tejaswinidockerhub/catalogue
      imagePullPolicy: Always
      volumeMounts:
        - mountPath: /parameters
          name: parameters
  volumes:
    - name: parameters
      emptyDir: { }

---
apiVersion : v1
kind : Pod
metadata:
  name: user
  labels:
    app: user
spec:
  containers:
    - name: user
      image: tejaswinidockerhub/user
---
apiVersion : v1
kind : Pod
metadata:
  name: cart
  labels:
    app: cart
spec:
  containers:
    - name: cart
      image: tejaswinidockerhub/cart
---
apiVersion : v1
kind : Pod
metadata:
  name: payment
  labels:
    app: payment
spec:
  containers:
    - name: payment
      image: tejaswinidockerhub/payment
---
apiVersion : v1
kind : Pod
metadata:
  name: shipping
  labels:
    app: shipping
spec:
  containers:
    - name: shipping
      image: tejaswinidockerhub/shipping
---
apiVersion : v1
kind : Pod
metadata:
  name: dispatch
  labels:
    app: dispatch  #the labels are whenever a set of pods communicate with eacheather when we use label the service account will pick those pods automatically
spec:
  containers:
    - name: dispatch
      image: tejaswinidockerhub/dispatch

# below all are service accounts which is used to communicate internally between them
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  type: LoadBalancer # only frontend is exposed to outside world so we had loadbalancer to frontend
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: catalogue
spec:
  selector:
    app: catalogue
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: user
spec:
  selector:
    app: user
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: cart
spec:
  selector:
    app: cart
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: payment
spec:
  selector:
    app: payment
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: shipping
spec:
  selector:
    app: shipping
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: dispatch
spec:
  selector:
    app: dispatch
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: frontend
  annotations:
    external-dns.alpha.kubernetes.io/hostname: frontend-dev.tejudevops.online
spec:
  ingressClassName: nginx
  rules:
    - host: frontend-dev.tejudevops.online
      http:
        paths:
          - pathType: Prefix
            backend:
              service:
                name: frontend
                port:
                  number: 80
            path: /


